Terminals unused in grammar

   WHILE
   FOR
   RETURN
   NE
   SUB
   LBRACK
   RBRACK
   BOOL


State 30 conflicts: 3 shift/reduce
State 46 conflicts: 13 shift/reduce
State 47 conflicts: 13 shift/reduce
State 48 conflicts: 3 shift/reduce
State 49 conflicts: 3 shift/reduce
State 50 conflicts: 3 shift/reduce
State 51 conflicts: 3 shift/reduce
State 52 conflicts: 3 shift/reduce
State 53 conflicts: 3 shift/reduce
State 54 conflicts: 3 shift/reduce
State 55 conflicts: 3 shift/reduce
State 56 conflicts: 3 shift/reduce
State 57 conflicts: 13 shift/reduce
State 59 conflicts: 3 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration SEMICOLON
    6          | assign SEMICOLON
    7          | if

    8 declaration: T IDENTIFIER LOP_ASSIGN expr
    9            | T IDENTIFIER

   10 assign: IDENTIFIER LOP_ASSIGN expr

   11 if: IF LPAREN expr RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
   12   | IF LPAREN expr RPAREN LBRACE statements RBRACE

   13 expr: IDENTIFIER
   14     | INTEGER
   15     | CHAR
   16     | STRING
   17     | expr OR expr
   18     | expr AND expr
   19     | expr EQ expr
   20     | expr NEQ expr
   21     | expr LE expr
   22     | expr LT expr
   23     | expr GE expr
   24     | expr GT expr
   25     | expr ADD expr
   26     | expr MINUS expr
   27     | expr MUL expr
   28     | expr DIV expr
   29     | expr MOD expr
   30     | NOT expr

   31 T: T_INT
   32  | T_CHAR
   33  | T_BOOL
   34  | T_STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
T_CHAR (258) 32
T_INT (259) 31
T_STRING (260) 34
T_BOOL (261) 33
IF (262) 11 12
ELSE (263) 11
WHILE (264)
FOR (265)
RETURN (266)
LOP_ASSIGN (267) 8 10
OR (268) 17
AND (269) 18
EQ (270) 19
NEQ (271) 20
NE (272)
LE (273) 21
LT (274) 22
GE (275) 23
GT (276) 24
ADD (277) 25
SUB (278)
MUL (279) 27
DIV (280) 28
MOD (281) 29
NOT (282) 30
LBRACE (283) 11 12
RBRACE (284) 11 12
LBRACK (285)
RBRACK (286)
LPAREN (287) 11 12
RPAREN (288) 11 12
SEMICOLON (289) 4 5 6
IDENTIFIER (290) 8 9 10 13
INTEGER (291) 14
CHAR (292) 15
BOOL (293)
STRING (294) 16
MINUS (295) 26


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 1, on right: 0
statements (43)
    on left: 2 3, on right: 1 3 11 12
statement (44)
    on left: 4 5 6 7, on right: 2 3
declaration (45)
    on left: 8 9, on right: 5
assign (46)
    on left: 10, on right: 6
if (47)
    on left: 11 12, on right: 7
expr (48)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30,
    on right: 8 10 11 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30
T (49)
    on left: 31 32 33 34, on right: 8 9


State 0

    0 $accept: . program $end

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    IF          shift, and go to state 5
    SEMICOLON   shift, and go to state 6
    IDENTIFIER  shift, and go to state 7

    program      go to state 8
    statements   go to state 9
    statement    go to state 10
    declaration  go to state 11
    assign       go to state 12
    if           go to state 13
    T            go to state 14


State 1

   32 T: T_CHAR .

    $default  reduce using rule 32 (T)


State 2

   31 T: T_INT .

    $default  reduce using rule 31 (T)


State 3

   34 T: T_STRING .

    $default  reduce using rule 34 (T)


State 4

   33 T: T_BOOL .

    $default  reduce using rule 33 (T)


State 5

   11 if: IF . LPAREN expr RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
   12   | IF . LPAREN expr RPAREN LBRACE statements RBRACE

    LPAREN  shift, and go to state 15


State 6

    4 statement: SEMICOLON .

    $default  reduce using rule 4 (statement)


State 7

   10 assign: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 16


State 8

    0 $accept: program . $end

    $end  shift, and go to state 17


State 9

    1 program: statements .
    3 statements: statements . statement

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    IF          shift, and go to state 5
    SEMICOLON   shift, and go to state 6
    IDENTIFIER  shift, and go to state 7

    $default  reduce using rule 1 (program)

    statement    go to state 18
    declaration  go to state 11
    assign       go to state 12
    if           go to state 13
    T            go to state 14


State 10

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 11

    5 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 19


State 12

    6 statement: assign . SEMICOLON

    SEMICOLON  shift, and go to state 20


State 13

    7 statement: if .

    $default  reduce using rule 7 (statement)


State 14

    8 declaration: T . IDENTIFIER LOP_ASSIGN expr
    9            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 21


State 15

   11 if: IF LPAREN . expr RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
   12   | IF LPAREN . expr RPAREN LBRACE statements RBRACE

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 27


State 16

   10 assign: IDENTIFIER LOP_ASSIGN . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 28


State 17

    0 $accept: program $end .

    $default  accept


State 18

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 19

    5 statement: declaration SEMICOLON .

    $default  reduce using rule 5 (statement)


State 20

    6 statement: assign SEMICOLON .

    $default  reduce using rule 6 (statement)


State 21

    8 declaration: T IDENTIFIER . LOP_ASSIGN expr
    9            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 29

    $default  reduce using rule 9 (declaration)


State 22

   30 expr: NOT . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 30


State 23

   13 expr: IDENTIFIER .

    $default  reduce using rule 13 (expr)


State 24

   14 expr: INTEGER .

    $default  reduce using rule 14 (expr)


State 25

   15 expr: CHAR .

    $default  reduce using rule 15 (expr)


State 26

   16 expr: STRING .

    $default  reduce using rule 16 (expr)


State 27

   11 if: IF LPAREN expr . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
   12   | IF LPAREN expr . RPAREN LBRACE statements RBRACE
   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR      shift, and go to state 31
    AND     shift, and go to state 32
    EQ      shift, and go to state 33
    NEQ     shift, and go to state 34
    LE      shift, and go to state 35
    LT      shift, and go to state 36
    GE      shift, and go to state 37
    GT      shift, and go to state 38
    ADD     shift, and go to state 39
    MUL     shift, and go to state 40
    DIV     shift, and go to state 41
    MOD     shift, and go to state 42
    RPAREN  shift, and go to state 43
    MINUS   shift, and go to state 44


State 28

   10 assign: IDENTIFIER LOP_ASSIGN expr .
   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    EQ     shift, and go to state 33
    NEQ    shift, and go to state 34
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    $default  reduce using rule 10 (assign)


State 29

    8 declaration: T IDENTIFIER LOP_ASSIGN . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 45


State 30

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr
   30     | NOT expr .

    OR   shift, and go to state 31
    AND  shift, and go to state 32
    MOD  shift, and go to state 42

    OR        [reduce using rule 30 (expr)]
    AND       [reduce using rule 30 (expr)]
    MOD       [reduce using rule 30 (expr)]
    $default  reduce using rule 30 (expr)


State 31

   17 expr: expr OR . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 46


State 32

   18 expr: expr AND . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 47


State 33

   19 expr: expr EQ . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 48


State 34

   20 expr: expr NEQ . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 49


State 35

   21 expr: expr LE . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 50


State 36

   22 expr: expr LT . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 51


State 37

   23 expr: expr GE . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 52


State 38

   24 expr: expr GT . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 53


State 39

   25 expr: expr ADD . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 54


State 40

   27 expr: expr MUL . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 55


State 41

   28 expr: expr DIV . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 56


State 42

   29 expr: expr MOD . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 57


State 43

   11 if: IF LPAREN expr RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE
   12   | IF LPAREN expr RPAREN . LBRACE statements RBRACE

    LBRACE  shift, and go to state 58


State 44

   26 expr: expr MINUS . expr

    NOT         shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    INTEGER     shift, and go to state 24
    CHAR        shift, and go to state 25
    STRING      shift, and go to state 26

    expr  go to state 59


State 45

    8 declaration: T IDENTIFIER LOP_ASSIGN expr .
   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    EQ     shift, and go to state 33
    NEQ    shift, and go to state 34
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    $default  reduce using rule 8 (declaration)


State 46

   17 expr: expr . OR expr
   17     | expr OR expr .
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    EQ     shift, and go to state 33
    NEQ    shift, and go to state 34
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 17 (expr)]
    AND       [reduce using rule 17 (expr)]
    EQ        [reduce using rule 17 (expr)]
    NEQ       [reduce using rule 17 (expr)]
    LE        [reduce using rule 17 (expr)]
    LT        [reduce using rule 17 (expr)]
    GE        [reduce using rule 17 (expr)]
    GT        [reduce using rule 17 (expr)]
    ADD       [reduce using rule 17 (expr)]
    MUL       [reduce using rule 17 (expr)]
    DIV       [reduce using rule 17 (expr)]
    MOD       [reduce using rule 17 (expr)]
    MINUS     [reduce using rule 17 (expr)]
    $default  reduce using rule 17 (expr)


State 47

   17 expr: expr . OR expr
   18     | expr . AND expr
   18     | expr AND expr .
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    EQ     shift, and go to state 33
    NEQ    shift, and go to state 34
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 18 (expr)]
    AND       [reduce using rule 18 (expr)]
    EQ        [reduce using rule 18 (expr)]
    NEQ       [reduce using rule 18 (expr)]
    LE        [reduce using rule 18 (expr)]
    LT        [reduce using rule 18 (expr)]
    GE        [reduce using rule 18 (expr)]
    GT        [reduce using rule 18 (expr)]
    ADD       [reduce using rule 18 (expr)]
    MUL       [reduce using rule 18 (expr)]
    DIV       [reduce using rule 18 (expr)]
    MOD       [reduce using rule 18 (expr)]
    MINUS     [reduce using rule 18 (expr)]
    $default  reduce using rule 18 (expr)


State 48

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   19     | expr EQ expr .
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 19 (expr)]
    AND       [reduce using rule 19 (expr)]
    MOD       [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)


State 49

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   20     | expr NEQ expr .
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 20 (expr)]
    AND       [reduce using rule 20 (expr)]
    MOD       [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)


State 50

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   21     | expr LE expr .
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 21 (expr)]
    AND       [reduce using rule 21 (expr)]
    MOD       [reduce using rule 21 (expr)]
    $default  reduce using rule 21 (expr)


State 51

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   22     | expr LT expr .
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 22 (expr)]
    AND       [reduce using rule 22 (expr)]
    MOD       [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)


State 52

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   23     | expr GE expr .
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 23 (expr)]
    AND       [reduce using rule 23 (expr)]
    MOD       [reduce using rule 23 (expr)]
    $default  reduce using rule 23 (expr)


State 53

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   24     | expr GT expr .
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 24 (expr)]
    AND       [reduce using rule 24 (expr)]
    MOD       [reduce using rule 24 (expr)]
    $default  reduce using rule 24 (expr)


State 54

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   25     | expr ADD expr .
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR   shift, and go to state 31
    AND  shift, and go to state 32
    MUL  shift, and go to state 40
    DIV  shift, and go to state 41
    MOD  shift, and go to state 42

    OR        [reduce using rule 25 (expr)]
    AND       [reduce using rule 25 (expr)]
    MOD       [reduce using rule 25 (expr)]
    $default  reduce using rule 25 (expr)


State 55

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   27     | expr MUL expr .
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR   shift, and go to state 31
    AND  shift, and go to state 32
    MOD  shift, and go to state 42

    OR        [reduce using rule 27 (expr)]
    AND       [reduce using rule 27 (expr)]
    MOD       [reduce using rule 27 (expr)]
    $default  reduce using rule 27 (expr)


State 56

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   28     | expr DIV expr .
   29     | expr . MOD expr

    OR   shift, and go to state 31
    AND  shift, and go to state 32
    MOD  shift, and go to state 42

    OR        [reduce using rule 28 (expr)]
    AND       [reduce using rule 28 (expr)]
    MOD       [reduce using rule 28 (expr)]
    $default  reduce using rule 28 (expr)


State 57

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr
   29     | expr MOD expr .

    OR     shift, and go to state 31
    AND    shift, and go to state 32
    EQ     shift, and go to state 33
    NEQ    shift, and go to state 34
    LE     shift, and go to state 35
    LT     shift, and go to state 36
    GE     shift, and go to state 37
    GT     shift, and go to state 38
    ADD    shift, and go to state 39
    MUL    shift, and go to state 40
    DIV    shift, and go to state 41
    MOD    shift, and go to state 42
    MINUS  shift, and go to state 44

    OR        [reduce using rule 29 (expr)]
    AND       [reduce using rule 29 (expr)]
    EQ        [reduce using rule 29 (expr)]
    NEQ       [reduce using rule 29 (expr)]
    LE        [reduce using rule 29 (expr)]
    LT        [reduce using rule 29 (expr)]
    GE        [reduce using rule 29 (expr)]
    GT        [reduce using rule 29 (expr)]
    ADD       [reduce using rule 29 (expr)]
    MUL       [reduce using rule 29 (expr)]
    DIV       [reduce using rule 29 (expr)]
    MOD       [reduce using rule 29 (expr)]
    MINUS     [reduce using rule 29 (expr)]
    $default  reduce using rule 29 (expr)


State 58

   11 if: IF LPAREN expr RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
   12   | IF LPAREN expr RPAREN LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    IF          shift, and go to state 5
    SEMICOLON   shift, and go to state 6
    IDENTIFIER  shift, and go to state 7

    statements   go to state 60
    statement    go to state 10
    declaration  go to state 11
    assign       go to state 12
    if           go to state 13
    T            go to state 14


State 59

   17 expr: expr . OR expr
   18     | expr . AND expr
   19     | expr . EQ expr
   20     | expr . NEQ expr
   21     | expr . LE expr
   22     | expr . LT expr
   23     | expr . GE expr
   24     | expr . GT expr
   25     | expr . ADD expr
   26     | expr . MINUS expr
   26     | expr MINUS expr .
   27     | expr . MUL expr
   28     | expr . DIV expr
   29     | expr . MOD expr

    OR   shift, and go to state 31
    AND  shift, and go to state 32
    MUL  shift, and go to state 40
    DIV  shift, and go to state 41
    MOD  shift, and go to state 42

    OR        [reduce using rule 26 (expr)]
    AND       [reduce using rule 26 (expr)]
    MOD       [reduce using rule 26 (expr)]
    $default  reduce using rule 26 (expr)


State 60

    3 statements: statements . statement
   11 if: IF LPAREN expr RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE
   12   | IF LPAREN expr RPAREN LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    IF          shift, and go to state 5
    RBRACE      shift, and go to state 61
    SEMICOLON   shift, and go to state 6
    IDENTIFIER  shift, and go to state 7

    statement    go to state 18
    declaration  go to state 11
    assign       go to state 12
    if           go to state 13
    T            go to state 14


State 61

   11 if: IF LPAREN expr RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE
   12   | IF LPAREN expr RPAREN LBRACE statements RBRACE .

    ELSE  shift, and go to state 62

    $default  reduce using rule 12 (if)


State 62

   11 if: IF LPAREN expr RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE  shift, and go to state 63


State 63

   11 if: IF LPAREN expr RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    IF          shift, and go to state 5
    SEMICOLON   shift, and go to state 6
    IDENTIFIER  shift, and go to state 7

    statements   go to state 64
    statement    go to state 10
    declaration  go to state 11
    assign       go to state 12
    if           go to state 13
    T            go to state 14


State 64

    3 statements: statements . statement
   11 if: IF LPAREN expr RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_STRING    shift, and go to state 3
    T_BOOL      shift, and go to state 4
    IF          shift, and go to state 5
    RBRACE      shift, and go to state 65
    SEMICOLON   shift, and go to state 6
    IDENTIFIER  shift, and go to state 7

    statement    go to state 18
    declaration  go to state 11
    assign       go to state 12
    if           go to state 13
    T            go to state 14


State 65

   11 if: IF LPAREN expr RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    $default  reduce using rule 11 (if)
